// === Challenge #1: Create a class ===
class BankAccount {
  constructor(ownerName) {
    this.ownerName = ownerName;
    this.balance = 0;
    this.transactions = []; // to track transaction history
  }

  // === Challenge #2: deposit method ===
  deposit(amount) {
    if (typeof amount !== "number") {
      console.log("Deposit failed: amount must be a number.");
      return;
    }

    if (amount < 0) {
      console.log("Negative deposit detected. Treating it as withdrawal...");
      this.withdraw(Math.abs(amount));
      return;
    }

    this.balance += amount;
    this.transactions.push({ type: "Deposit", amount, balance: this.balance });
    console.log(`Deposited ${amount}. New balance: ${this.balance}`);
  }

  // === Challenge #2: withdraw method ===
  withdraw(amount) {
    if (typeof amount !== "number") {
      console.log("Withdrawal failed: amount must be a number.");
      return;
    }

    if (amount <= 0) {
      console.log("Withdrawal failed: amount must be positive.");
      return;
    }

    if (amount > this.balance) {
      console.log("Insufficient Funds");
    } else {
      this.balance -= amount;
      this.transactions.push({ type: "Withdraw", amount, balance: this.balance });
      console.log(`Withdrew ${amount}. New balance: ${this.balance}`);
    }
  }

  // === Extra: Print Transaction History ===
  printTransactions() {
    console.log(`\nTransaction History for ${this.ownerName}:`);
    if (this.transactions.length === 0) {
      console.log("No transactions yet.");
      return;
    }
    for (const t of this.transactions) {
      console.log(`${t.type}: $${t.amount} | Balance after: $${t.balance}`);
    }
  }
}

// === Test it out ===
const person = new BankAccount("Jane Doe");

person.deposit(100);        // +100
person.deposit("abc");      // invalid
person.deposit(-50);        // should trigger withdrawal
person.withdraw(30);        // -30
person.withdraw(100);       // should fail (insufficient funds)
person.withdraw("xyz");     // invalid
person.withdraw(-20);       // invalid

console.log(`\nFinal Balance: ${person.balance}`);
person.printTransactions();
